/*
 *  Copyright (C) 2011 Peter Husemann <peter.husemann at cebitec uni bielefeld.de>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.bielefeld.uni.cebitec.contigorderingproject;

import de.bielefeld.uni.cebitec.common.CustomFileFilter;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;

public final class ContigOrderingProjectVisualPanel2 extends JPanel implements DocumentListener {

  public static final String PROP_CONTIGS_FILE = "contigs";
  public static final String PROP_REFERENCES = "references";

  	//light red, as background for wrong entries
	private Color wrong = new Color(255,131,131);

  private Vector<ReferenceSelection> references;


  /** Creates new form ContigOrderingProjectVisualPanel1 */
  public ContigOrderingProjectVisualPanel2() {
 		references = new Vector<ReferenceSelection>();
		references.add(new ReferenceSelection());
    initComponents();
    contigsTextField.getDocument().addDocumentListener(this);
    contigsTextField.getDocument().putProperty("name", PROP_CONTIGS_FILE);
  }

  @Override
  public String getName() {
    return "Select Contigs / References";
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    contigsTextField = new javax.swing.JTextField();
    browseContigs = new javax.swing.JButton();
    referenceGenomesPanel = new javax.swing.JPanel();
    buReferences = new javax.swing.JButton();
    referenceGenomesScrollPane = new javax.swing.JScrollPane();
    referenceGenomesFilesPanel = new javax.swing.JPanel();
    contigsLabel = new javax.swing.JLabel();

    org.openide.awt.Mnemonics.setLocalizedText(browseContigs, org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel2.class, "ContigOrderingProjectVisualPanel2.browseContigs.text")); // NOI18N
    browseContigs.setActionCommand(org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel2.class, "ContigOrderingProjectVisualPanel2.browseContigs.actionCommand")); // NOI18N
    browseContigs.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        browseContigsActionPerformed(evt);
      }
    });

    referenceGenomesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel2.class, "ContigOrderingProjectVisualPanel2.referenceGenomesPanel.border.title"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(buReferences, org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel2.class, "ContigOrderingProjectVisualPanel2.buReferences.text")); // NOI18N
    buReferences.setToolTipText(org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel2.class, "ContigOrderingProjectVisualPanel2.buReferences.toolTipText")); // NOI18N
    buReferences.setPreferredSize(new java.awt.Dimension(116, 26));
    buReferences.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buReferencesaddReferenceFile(evt);
      }
    });

    referenceGenomesScrollPane.setBorder(null);
    referenceGenomesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    referenceGenomesScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    referenceGenomesScrollPane.setHorizontalScrollBar(null);

    referenceGenomesFilesPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 2));
    referenceGenomesScrollPane.setViewportView(referenceGenomesFilesPanel);
    setReferenceSelectionFromVector();

    javax.swing.GroupLayout referenceGenomesPanelLayout = new javax.swing.GroupLayout(referenceGenomesPanel);
    referenceGenomesPanel.setLayout(referenceGenomesPanelLayout);
    referenceGenomesPanelLayout.setHorizontalGroup(
      referenceGenomesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(referenceGenomesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, referenceGenomesPanelLayout.createSequentialGroup()
        .addContainerGap(319, Short.MAX_VALUE)
        .addComponent(buReferences, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    referenceGenomesPanelLayout.setVerticalGroup(
      referenceGenomesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(referenceGenomesPanelLayout.createSequentialGroup()
        .addComponent(buReferences, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(referenceGenomesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
    );

    org.openide.awt.Mnemonics.setLocalizedText(contigsLabel, org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel2.class, "ContigOrderingProjectVisualPanel2.contigsLabel.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(contigsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(contigsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(browseContigs)
        .addContainerGap())
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
          .addContainerGap()
          .addComponent(referenceGenomesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addContainerGap()))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(contigsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(browseContigs)
          .addComponent(contigsLabel))
        .addContainerGap(263, Short.MAX_VALUE))
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addGap(51, 51, 51)
          .addComponent(referenceGenomesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addContainerGap()))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void browseContigsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseContigsActionPerformed

          File contigs = new FileChooserBuilder("ContigFastaFile")
              .setFilesOnly(true)
              .addFileFilter(new CustomFileFilter(".fas,.fna,.fasta", "FASTA File"))
              .setTitle("Select Contigs FASTA File")
              .showOpenDialog();

      if(contigs!=null){
                contigsTextField.setText(FileUtil.normalizeFile(contigs).getAbsolutePath());
      }



  }//GEN-LAST:event_browseContigsActionPerformed

  private void buReferencesaddReferenceFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buReferencesaddReferenceFile
      File[] referenceFastaFiles = new FileChooserBuilder("ReferenceFastaFile")
              .addFileFilter(new CustomFileFilter(".fas,.fna,.fasta", "FASTA File"))
              .setFilesOnly(true).setTitle("Select Reference Genome(s)")
              .showMultiOpenDialog();

      if(referenceFastaFiles!=null){
        for (int i = 0; i < referenceFastaFiles.length; i++) {
          File file = referenceFastaFiles[i];
          references.add(new ReferenceSelection(file));
        }
        setReferenceSelectionFromVector();
      }



  }//GEN-LAST:event_buReferencesaddReferenceFile

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton browseContigs;
  private javax.swing.JButton buReferences;
  private javax.swing.JLabel contigsLabel;
  private javax.swing.JTextField contigsTextField;
  private javax.swing.JPanel referenceGenomesFilesPanel;
  private javax.swing.JPanel referenceGenomesPanel;
  private javax.swing.JScrollPane referenceGenomesScrollPane;
  // End of variables declaration//GEN-END:variables



  	/**
	 * Creates a dynamic panel which shows the reference genomes from the vector
	 * references. If a file is not existing the textfield will get a light red
	 * background.
	 */
	private void setReferenceSelectionFromVector() {
		referenceGenomesFilesPanel.removeAll();

		Vector<ReferenceSelection> croppedList = new Vector<ReferenceSelection>();

		for (int i = 0; i < references.size(); i++) {
			if (!references.get(i).hasInitialText()) {
				croppedList.add(references.get(i));
			}
		}

		croppedList.add(new ReferenceSelection());

		references = croppedList;

		// go through the vector and add each reference panel to the list of
		// panels
		for (int i = 0; i < references.size(); i++) {
			referenceGenomesFilesPanel.add(references.get(i));
		}

		referenceGenomesFilesPanel.revalidate();
		referenceGenomesFilesPanel.repaint();

		// TODO request focus from the last component. below does not work...
		// referenceGenomesFilesPanel.getComponent(referenceGenomesFilesPanel.getComponentCount()-1).requestFocusInWindow();
	}

  /**
   * Checks how many references are not valid files
   * @return
   */
  public int checkReferences(){
    int nonexisting =0;
    for (int i = 0; i < references.size(); i++) {
      if(references.get(i).markNonexistingFile()){
        nonexisting++;
      }
    }


    return nonexisting;
  }


  public String getContigs() {
    return contigsTextField.getText();
  }

  public String[] getReferences() {
    Vector<String> pathes = new Vector<String>();
    String pathAndName="";
    for (int i = 0; i < references.size(); i++) {
      pathAndName = references.get(i).getFile();
      if(pathAndName != null && !pathAndName.isEmpty()) {
        pathes.add(pathAndName);
      }

    }
    if(!pathes.isEmpty()) {
      String[] out = new String[pathes.size()];
      pathes.toArray(out);
      return out;
    } else {
      return null;
    }
  }

  @Override
  public void insertUpdate(DocumentEvent e) {
    fireTextfieldUpdate(e);
  }

  @Override
  public void removeUpdate(DocumentEvent e) {
    fireTextfieldUpdate(e);
  }

  @Override
  public void changedUpdate(DocumentEvent e) {
    fireTextfieldUpdate(e);
  }

  private void fireTextfieldUpdate(DocumentEvent e) {
    String type = (String)e.getDocument().getProperty("name");
    boolean valid = checkForFile(e);
    firePropertyChange(type, valid, !valid);
  }

    private boolean checkForFile(DocumentEvent e) {
    Document d = e.getDocument();
    String fileAndPath="";
    try {
      fileAndPath = d.getText(0, d.getLength());
    } catch (BadLocationException ex) {
      Exceptions.printStackTrace(ex);
    }
    File file = new File(fileAndPath);
    if(file.exists()) {
      return true;
    } else {
      return false;
    }

  }


  	/**
	 * This is a special frame to select one reference genomes.
	 *
	 * @author phuseman
	 */
	public class ReferenceSelection extends JPanel implements ActionListener,
			FocusListener, KeyListener {
		private JTextField tfReference;
		private JButton buReference;
		private String initialText = "Enter a path to a reference genome in FASTA format";

		public ReferenceSelection() {
			tfReference = new JTextField(initialText);
			tfReference.addKeyListener(this);
			tfReference.addFocusListener(this);
      tfReference.getDocument().addDocumentListener(ContigOrderingProjectVisualPanel2.this);
      tfReference.getDocument().putProperty("name", ContigOrderingProjectVisualPanel2.PROP_REFERENCES);

			buReference = new JButton("Remove");
			buReference.addActionListener(this);

			init();
		}

		public ReferenceSelection(File f) {
			tfReference = new JTextField(f.getAbsolutePath());
			tfReference.setCaretPosition(tfReference.getText().length());
      tfReference.getDocument().addDocumentListener(ContigOrderingProjectVisualPanel2.this);
      tfReference.getDocument().putProperty("name", ContigOrderingProjectVisualPanel2.PROP_REFERENCES);

      tfReference.addKeyListener(this);
			tfReference.addFocusListener(this);

			buReference = new JButton("Remove");
			buReference.addActionListener(this);

			init();
		}

    
		/**
		 * The common initial text that is displayed in the textfield
		 *
		 * @return
		 */
		public String getInitialText() {
			return initialText;
		}

		/**
		 * Distinguish if the content of the textfield is the initial text, or
		 * something custom, for example a specific file.
		 *
		 * @return
		 */
		public boolean hasInitialText() {
			return this.tfReference.getText().equals(initialText);
		}

		/**
		 * Gives the filename that is displayed in the textfield.
		 *
		 * @return string with filename
		 */
		public String getFile() {
			if (this.tfReference.getText().matches(initialText)) {
				return null;
			} else {
				return this.tfReference.getText();
			}

		}

		private void init() {
			buReference.setMaximumSize(new java.awt.Dimension(116, 26));
			buReference.setMinimumSize(new java.awt.Dimension(116, 26));

			javax.swing.GroupLayout referencePanelLayout = new javax.swing.GroupLayout(
					this);
			this.setLayout(referencePanelLayout);
			referencePanelLayout
					.setHorizontalGroup(referencePanelLayout
							.createParallelGroup(
									javax.swing.GroupLayout.Alignment.LEADING)
							.addGroup(
									javax.swing.GroupLayout.Alignment.TRAILING,
									referencePanelLayout
											.createSequentialGroup()
											.addContainerGap()
											.addComponent(
													tfReference,
													javax.swing.GroupLayout.DEFAULT_SIZE,
													200, Short.MAX_VALUE)
											.addPreferredGap(
													javax.swing.LayoutStyle.ComponentPlacement.RELATED)
											.addComponent(
													buReference,
													javax.swing.GroupLayout.PREFERRED_SIZE,
													121,
													javax.swing.GroupLayout.PREFERRED_SIZE)
											.addContainerGap()));
			referencePanelLayout
					.setVerticalGroup(referencePanelLayout
							.createParallelGroup(
									javax.swing.GroupLayout.Alignment.LEADING)
							.addGroup(
									referencePanelLayout
											.createParallelGroup(
													javax.swing.GroupLayout.Alignment.BASELINE)
											.addComponent(
													tfReference,
													javax.swing.GroupLayout.PREFERRED_SIZE,
													javax.swing.GroupLayout.DEFAULT_SIZE,
													javax.swing.GroupLayout.PREFERRED_SIZE)
											.addComponent(
													buReference,
													javax.swing.GroupLayout.PREFERRED_SIZE,
													21,
													javax.swing.GroupLayout.PREFERRED_SIZE)));

		}

		public void actionPerformed(ActionEvent e) {
			references.remove(this);
      tfReference.getDocument().removeDocumentListener(ContigOrderingProjectVisualPanel2.this);
			setReferenceSelectionFromVector();
		}

		/**
		 * Checks if the file that is shown in the textfield really is a proper
		 * file. If not, the background of the textfield will be colored.
     *
     * Returns true if the textfield file is not existing.
		 */
		public boolean markNonexistingFile() {
      boolean nonexisting=true;
			if (hasInitialText()) {
				tfReference.setBackground(Color.WHITE);
        nonexisting=false;
			} else {
				File f = new File(tfReference.getText());
				if (f != null && f.isFile() && f.canRead()) {
					tfReference.setBackground(Color.WHITE);
          nonexisting=false;
				} else {
					tfReference.setBackground(wrong);
          nonexisting=true;
				}

			}
      this.invalidate();
      return nonexisting;

		}

		@Override
		public void focusGained(FocusEvent e) {
			if (((JTextField) e.getSource()).getText().equalsIgnoreCase(
					initialText)) {
				tfReference.selectAll();
			}
		}

		@Override
		public void focusLost(FocusEvent e) {
			// if(!checkFile(((JTextField) e.getSource()).getText())) {
			// errorAlert("FocusFile is not readable.");
			// }
		}

		@Override
		public void keyReleased(KeyEvent e) {
			if (e.getKeyCode() == KeyEvent.VK_ENTER) {
				File file = new File(((JTextField) e.getSource()).getText());

				// if the string is not a file, or cannot be read, issue an
				// error
				if (file == null || !file.canRead()) {
					// if the string is a directory, open a dialog to specify a
					// file in that directory
				} else if (file.isDirectory()) {
                File fastaFile = new FileChooserBuilder("ReferenceFastaFile")
              .addFileFilter(new CustomFileFilter(".fas,.fna,.fasta", "FASTA File"))
              .setFilesOnly(true).setTitle("Select Reference Genome(s)").showOpenDialog();

                if (fastaFile!=null) {
						tfReference.setText(fastaFile.getAbsolutePath());
						setReferenceSelectionFromVector();
          }
					
					// if it is a file that can be read, enter it into the
					// textfield
				} else if (file.canRead()) {
					setReferenceSelectionFromVector();
				}

			}

		}

		@Override
		public void keyTyped(KeyEvent e) {
			;// unused
		}

		@Override
		public void keyPressed(KeyEvent e) {
			;// unused
		}
	}

}
