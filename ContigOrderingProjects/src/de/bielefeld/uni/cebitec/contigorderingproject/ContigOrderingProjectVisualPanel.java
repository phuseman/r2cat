/*
 *  Copyright (C) 2011 Peter Husemann <peter.husemann at cebitec uni bielefeld.de>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.bielefeld.uni.cebitec.contigorderingproject;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;

public final class ContigOrderingProjectVisualPanel extends JPanel implements DocumentListener {

  public static final String PROP_PROJECT_PATH = "projectPath";
  public static final String PROP_CONTIGS_FILE = "contigs";
  public static final String PROP_REFERENCES = "references";

  /** Creates new form ContigOrderingProjectVisualPanel1 */
  public ContigOrderingProjectVisualPanel() {
    initComponents();
    projectParentTextField.getDocument().addDocumentListener(this);
    projectNameTextField.getDocument().addDocumentListener(this);

    //this is often the netbeans directory. if so, take the user dir.
    String defaultPath = ProjectChooser.getProjectsFolder().getAbsolutePath();
    if (defaultPath.matches("NetBeansProjects")) {
      defaultPath=System.getProperty("user.home");
    }

    projectParentTextField.setText(defaultPath);
  }

  @Override
  public String getName() {
    return "Select Project Location";
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    projectNameLabel = new javax.swing.JLabel();
    projectNameTextField = new javax.swing.JTextField();
    projectParentLabel = new javax.swing.JLabel();
    projectParentTextField = new javax.swing.JTextField();
    browseButton = new javax.swing.JButton();
    projectPathLabel = new javax.swing.JLabel();
    projectPathTextField = new javax.swing.JTextField();

    org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel.class, "ContigOrderingProjectVisualPanel.projectNameLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(projectParentLabel, org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel.class, "ContigOrderingProjectVisualPanel.projectParentLabel.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel.class, "ContigOrderingProjectVisualPanel.browseButton.text")); // NOI18N
    browseButton.setActionCommand(org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel.class, "ContigOrderingProjectVisualPanel.browseButton.actionCommand")); // NOI18N
    browseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        browseButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(projectPathLabel, org.openide.util.NbBundle.getMessage(ContigOrderingProjectVisualPanel.class, "ContigOrderingProjectVisualPanel.projectPathLabel.text")); // NOI18N

    projectPathTextField.setEditable(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(projectNameLabel)
          .addComponent(projectParentLabel)
          .addComponent(projectPathLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(projectNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
          .addComponent(projectParentTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
          .addComponent(projectPathTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(browseButton)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(projectNameLabel)
          .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(projectParentLabel)
          .addComponent(projectParentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(browseButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(projectPathLabel)
          .addComponent(projectPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(213, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
    String command = evt.getActionCommand();
    if ("BROWSE".equals(command)) {
      
      File defaultWorkingDir = new File(projectParentTextField.getText());
      if(!defaultWorkingDir.exists()) {
        defaultWorkingDir=new File(System.getProperty("user.home"));
      }

      File projectLocation = new FileChooserBuilder("ContigOrderingProjectLocation")
              .setDefaultWorkingDirectory(defaultWorkingDir)
              .setDirectoriesOnly(true)
              .setTitle("Select Project Location")
              .showOpenDialog();

      if(projectLocation!=null){
                projectParentTextField.setText(FileUtil.normalizeFile(projectLocation).getAbsolutePath());
                ProjectChooser.setProjectsFolder(projectLocation);
      }

    }
  }//GEN-LAST:event_browseButtonActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton browseButton;
  private javax.swing.JLabel projectNameLabel;
  private javax.swing.JTextField projectNameTextField;
  private javax.swing.JLabel projectParentLabel;
  private javax.swing.JTextField projectParentTextField;
  private javax.swing.JLabel projectPathLabel;
  private javax.swing.JTextField projectPathTextField;
  // End of variables declaration//GEN-END:variables

  @Override
  public void insertUpdate(DocumentEvent e) {
    updatePath();
  }

  @Override
  public void removeUpdate(DocumentEvent e) {
    updatePath();
  }

  @Override
  public void changedUpdate(DocumentEvent e) {
    updatePath();
  }

  private void updatePath() {
    String projectspath = getProjectPath();
    if (projectspath.length() > 0) {
      String oldPath = projectPathTextField.getText();
      projectPathTextField.setText(projectspath);
      firePropertyChange(PROP_PROJECT_PATH, oldPath, projectspath);
    }
  }

  public String getProjectPath() {
    if (getProjectParentPath().length() > 0 && getProjectName().length() > 0) {
      return getProjectParentPath() + File.separatorChar + getProjectName();
    } else {
      return "";
    }
  }

  public String getProjectName() {
    if (projectNameTextField != null) {
      return projectNameTextField.getText().trim();
    } else {
      return "";
    }
  }

  public String getProjectParentPath() {
    if (projectParentTextField != null) {
      return projectParentTextField.getText().trim();
    } else {
      return "";
    }
  }

  public String getContigsFile() {
    throw new UnsupportedOperationException("Not supported yet.");
  }

  public String[] getReferences() {
    throw new UnsupportedOperationException("Not supported yet.");
  }
}
