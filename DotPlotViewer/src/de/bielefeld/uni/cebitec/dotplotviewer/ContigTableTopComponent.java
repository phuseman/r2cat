/*
 *  Copyright (C) 2011 phuseman
 * 
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.bielefeld.uni.cebitec.dotplotviewer;

import de.bielefeld.uni.cebitec.qgram.MatchList;
import de.bielefeld.uni.cebitec.r2cat.gui.SequenceOrderTable;
import de.bielefeld.uni.cebitec.r2cat.gui.SequenceOrderTableModel;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.bielefeld.uni.cebitec.dotplotviewer//ContigTable//EN",
autostore = false)
public final class ContigTableTopComponent extends TopComponent implements PropertyChangeListener {

  private static ContigTableTopComponent instance;
  /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
  private static final String PREFERRED_ID = "ContigTableTopComponent";

  public ContigTableTopComponent() {
    initComponents();
    setName(NbBundle.getMessage(ContigTableTopComponent.class, "CTL_ContigTableTopComponent"));
    setToolTipText(NbBundle.getMessage(ContigTableTopComponent.class, "HINT_ContigTableTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));


    			this.setLayout(new BorderLayout());

          this.setMatchList(DotPlotViewerTopComponent.findInstance().getMatchList());


  }
  
  
  public void setMatchList(MatchList ml) {
    this.removeAll();
              			SequenceOrderTable qso = new SequenceOrderTable(ml);
			SequenceOrderTableModel model = (SequenceOrderTableModel) qso
					.getModel();
			model.setShowComplementColumn(true);
			JScrollPane tp = new JScrollPane(qso);
			this.add(tp,BorderLayout.CENTER);
      
      			JPanel controlPanel = new JPanel();
			controlPanel.add(new JLabel("Move one step towards sequence"));
			JButton up = new JButton("start");
			up.setActionCommand("up");
			controlPanel.add(up);
			up.addActionListener(qso);
			JButton down = new JButton("end");
			down.setActionCommand("down");
			controlPanel.add(down);
			down.addActionListener(qso);

			this.add(controlPanel,BorderLayout.SOUTH);
      this.revalidate();
      

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setLayout(new java.awt.BorderLayout());
  }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized ContigTableTopComponent getDefault() {
    if (instance == null) {
      instance = new ContigTableTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the ContigTableTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized ContigTableTopComponent findInstance() {
    TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(ContigTableTopComponent.class.getName()).warning(
              "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof ContigTableTopComponent) {
      return (ContigTableTopComponent) win;
    }
    Logger.getLogger(ContigTableTopComponent.class.getName()).warning(
            "There seem to be multiple components with the '" + PREFERRED_ID
            + "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }

  @Override
  public int getPersistenceType() {
    return TopComponent.PERSISTENCE_ALWAYS;
  }

  @Override
  public void componentOpened() {
        DotPlotViewerTopComponent.findInstance().addPropertyChangeListener(this);
  }

  @Override
  public void componentClosed() {
    DotPlotViewerTopComponent.findInstance().removePropertyChangeListener(this);
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  Object readProperties(java.util.Properties p) {
    if (instance == null) {
      instance = this;
    }
    instance.readPropertiesImpl(p);
    return instance;
  }

  private void readPropertiesImpl(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override
  protected String preferredID() {
    return PREFERRED_ID;
  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) {
    if (evt.getNewValue()==null) {
      this.close();
    } else {
      if ( evt.getNewValue() instanceof  MatchList ) {
        this.setMatchList((MatchList) evt.getNewValue());
      }
    }
  }
}
