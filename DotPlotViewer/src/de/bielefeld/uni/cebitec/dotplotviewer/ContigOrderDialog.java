/*
 * Copyright (C) 2011 phuseman
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * ContigOrderDialog.java
 *
 * Created on 11.08.2011, 09:37:13
 */
package de.bielefeld.uni.cebitec.dotplotviewer;

import de.bielefeld.uni.cebitec.common.CustomFileFilter;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.filesystems.FileChooserBuilder;

/**
 *
 * @author phuseman
 */
public class ContigOrderDialog extends javax.swing.JDialog {

  /** Creates new form ContigOrderDialog */
  public ContigOrderDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
  }

  public void setText(String text) {
    contigOrderTextArea.setText(text);

    Dimension d = contigOrderTextArea.getPreferredSize();

    //a bit larger to account for the buttons etc.
    d.height += 100;
    d.width += 30;

    //not larger than the screen is
    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
    d.height = Math.min(d.height, screen.height);
    d.width = Math.min(d.width, screen.width);

    this.setSize(d);


  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    contigOrderTextArea = new javax.swing.JTextArea();
    jPanel1 = new javax.swing.JPanel();
    saveButton = new javax.swing.JButton();
    quitButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    contigOrderTextArea.setColumns(20);
    contigOrderTextArea.setRows(5);
    contigOrderTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        contigOrderTextAreaFocusGained(evt);
      }
    });
    jScrollPane1.setViewportView(contigOrderTextArea);

    getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

    saveButton.setText(org.openide.util.NbBundle.getMessage(ContigOrderDialog.class, "ContigOrderDialog.saveButton.text")); // NOI18N
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveButtonActionPerformed(evt);
      }
    });
    jPanel1.add(saveButton);

    quitButton.setText(org.openide.util.NbBundle.getMessage(ContigOrderDialog.class, "ContigOrderDialog.quitButton.text")); // NOI18N
    quitButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        quitButtonActionPerformed(evt);
      }
    });
    jPanel1.add(quitButton);

    getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
    this.dispose();
  }//GEN-LAST:event_quitButtonActionPerformed

  private void contigOrderTextAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contigOrderTextAreaFocusGained
    contigOrderTextArea.selectAll();
//    contigOrderTextArea.setCaretPosition(0);
//    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
//            new StringSelection(contigOrderTextArea.getText()), null);

  }//GEN-LAST:event_contigOrderTextAreaFocusGained

  private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
                  File f = new FileChooserBuilder("ExportContigOrder")
              .setFilesOnly(true)
              .addFileFilter(new CustomFileFilter(".txt", "Text File"))
              .setTitle("Export Order to Text File")
              .showSaveDialog();

		if (f != null) {
    
			try {
      		BufferedWriter out = new BufferedWriter(new FileWriter(f));
		out.write(contigOrderTextArea.getText()
);
		out.close();
			} catch (IOException e) {
        DialogDisplayer.getDefault().notify(
                new NotifyDescriptor(e.getLocalizedMessage(),
                "Could not write File",
                NotifyDescriptor.DEFAULT_OPTION,
                NotifyDescriptor.ERROR_MESSAGE,
                null,
                null));
			}
    }
    
  }//GEN-LAST:event_saveButtonActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextArea contigOrderTextArea;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton quitButton;
  private javax.swing.JButton saveButton;
  // End of variables declaration//GEN-END:variables
}
